name: create-version
on:

  push
jobs:
  runs-shell-commands:
    runs-on: ubuntu-latest
    outputs:
      only_promote: ${{ steps.step_pr.outputs.only_promote }}
    steps:
    - name: checkout - para ler o repo atual
      uses: actions/checkout@v1

    - name: teste leitura de arquivo
      run: |
        pwd
        #cat mywork/sfdx-project.json | jq '[.packageDirectories[].dependencies[]]' > list.json
        #cat list.json
        # salva o arquivo de pacotes instalados em json
        #cat installed.json | jq '[.result[]]' > pacotes_instalados.json
        #cat pacotes_instalados.json

        echo "[debug] teste de não instalar pacote fdp"
        cat test.json
        cat test.json | jq '[.result]' > list_IT.json
        echo "[debug] somente listando"
        cat list_IT.json
        echo "[debug] parse to array"
        readarray -t your_array < <(jq -r '.[].records[]' list_IT.json )

        declare -a your_array

        for i in "${your_array[@]}"
        do
          echo "teste: $i "
          echo "$i[SubscriberPackageVersion.id]"
          # or do whatever with individual element of the array
        done
#         # for olhando para o json.list procurando o nome "package"" dele no "SubscriberPackageName", se achar verifica se o versionNumber do list é menor que o SubscriberPackageVersionNumber

# versionPackage=2.2.1.latest
# versionProd=2.2.3.10

# vercomp () {
#     if [[ $1 == $2 ]]
#     then
#         echo "$1 é igual a $2"
#         return 0
#     fi
#     local IFS=.
#     local i ver1=($1) ver2=($2)
#     # fill empty fields in ver1 with zeros
#     for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
#     do
#         ver1[i]=0
#     done
#     for ((i=0; i<3; i++))
#     do
#         if [[ -z ${ver2[i]} ]]
#         then
#             # fill empty fields in ver2 with zeros
#             ver2[i]=0
#         fi
#         if ((10#${ver1[i]} > 10#${ver2[i]}))
#         then
#             echo "$1 (${ver1[i]}) é maior que prod $2 (${ver2[i]})"
#             # ele olha item por item, se tirar o return vai continuar olhando os demais
#             return 1
#         fi
#         if ((10#${ver1[i]} < 10#${ver2[i]}))
#         then
#             echo "$1 (${ver1[i]}) é menor que prod $2 (${ver2[i]})"
#             return 2
#         fi
#     done
#     echo "Analise finalizada"
#     return 0
# }

# versions_1="2.2.0 1.3.0 2.3.4"
# versions_2="2.2.0 1.3.0 2.3.4"
# versions_lower_count=0
# for v1 in $versions_1; do
#     for v2 in $versions_2; do
#         echo "v1 = $v1 / v2 = $v2"
#        vercomp $v1 $v2
#        vercomp_result=$?
        
#         if [ $vercomp_result -eq 2 ]; then
#            versions_lower_count=$((versions_lower_count + 1))
#         fi
#     done;
# done;
# # vercomp $versionPackage $versionProd

# echo "existem $versions_lower_count pacotes com versão abaixo de prod, favor olhar o log acima"

#         # problema é, o SubscriberPackageVersionNumber vai ter os 4 até build , o versionNumber tem até "path" precisa tratar para comparar só os 3 numeros
#         # salvar que para aquele pacotes o item[1] da dependencia precisa ou não ser instalado
        
    - name: write without show
      run: |
        echo "antes"
        > file1.txt cat <<< "This is a here-string with random"         
        echo "depois"
        cat file1.txt 
        gmud=

        echo "GMUD=comvalor" >> .env
        cat .env >> $GITHUB_ENV
        cat $GITHUB_ENV
    - name: nao-pega-env-do-mesmo-step
      id: step_pr
      run: |  
        echo "[DEBUG] ${{ env.GMUD }} "
        # if [[ -z $gmud ]]; then
        if [[ -z "${{ env.GMUD }}" ]]; then
          echo "gmud vazia"
          echo "only_promote=true" >> $GITHUB_OUTPUT
        else
          echo "gmud com valor"
          echo "only_promote=false" >> $GITHUB_OUTPUT
        fi
        cat $GITHUB_OUTPUT

  mostrando-info:
    runs-on: ubuntu-latest
    needs: [runs-shell-commands]
    steps:
    - name: printando-saida
      run: |
        echo ${{ needs.runs-shell-commands.outputs.only_promote }}

        if [[ ${{ needs.runs-shell-commands.outputs.only_promote }} == 'false' ]]; then
          echo "bate valores"
        else
          echo "lascou"
        fi

  runs-second-job:
    needs: [runs-shell-commands]
    if: needs.runs-shell-commands.outputs.only_promote == 'false'
    runs-on: ubuntu-latest
    steps:
    - name: npm-version
      run: |
        echo ${{ needs.runs-shell-commands.outputs.only_promote }}
        npm -v
        node -v
        npm install sfdx-cli --global
        npm install @salesforce/cli --global
        sfdx -v
    - name: chekout - para ler o repo atual
      uses: actions/checkout@v1
    - name: List files - pra ver se clona mesmo na maquina local
      run: |
        pwd
        ls
    - name: connected app - DECRYPTED
      run: |
        openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out server.key -base64 -K ${{secrets.DECRYPTION_KEY}} -iv ${{secrets.DECRYPTION_IV}}
    - name: connected app - authorize2
      run: |
        echo username value ${{ secrets.USERNAME_STAGING }}
        sfdx force:auth:jwt:grant --clientid=${{ secrets.CONSUMER_KEY }} --username=${{ secrets.USERNAME }} --jwtkeyfile server.key --instanceurl https://testeemily1-dev-ed.my.salesforce.com

        sfdx force:package:version:create -d TESTE-App -k password123
